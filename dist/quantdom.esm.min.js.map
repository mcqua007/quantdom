{"version":3,"file":"quantdom.esm.min.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @class Quantdom\n */\nclass Quantdom {\n  constructor(selector) {\n    this.selector = selector\n    if (typeof selector === 'string') {\n      this.els = document.querySelectorAll(selector)\n    } else if (NodeList.prototype.isPrototypeOf(selector)) {\n      this.els = selector // allow passing in nodelist\n    } else {\n      this.els = [selector] // handles the context/this case\n    }\n  }\n}\n\n// using prototype will be more efficient and\n// allows for a shared function across instances of the class\n// ===========================================================\n\n/**\n * @description executes a function on each iteration on the list of elements.\n * @param {function} handler A function to run on each iteration\n */\nQuantdom.prototype.each = function (handler) {\n  this.els.forEach(handler)\n  return this\n}\n\n/**\n * @description returns the parent of the first element that matches the selector\n * @returns {Quantdom} Returns parent of first element that matches the selector\n */\nQuantdom.prototype.parent = function () {\n  return new Quantdom(this.els[0].parentNode)\n}\n\n/**\n * @description returns the first element that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {Quantdom} returns first element that matches the selector\n */\nQuantdom.prototype.find = function (selector) {\n  return new Quantdom(this.els[0].querySelectorAll(selector))\n}\n\n/**\n * @description returns first element that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {HTMLElement} returns first element that matches the selector\n */\nQuantdom.prototype.findEl = function (selector) {\n  return this.els[0].querySelector(selector)\n}\n\n/**\n * @description returns elements that matches the selector in children of the selected node\n * @param {string} [selector] query selector to search for\n * @returns {Nodelist} returns nodelist of that matches the selector\n */\nQuantdom.prototype.findEls = function (selector) {\n  return this.els[0].querySelectorAll(selector)\n}\n\n/**\n * @description returns first element in an array of elements with same selector, acts like document.querySelector\n * @param {integer} [index] index of element to return\n * @returns {HTMLElement} an element in the array of elements you want to use\n */\nQuantdom.prototype.el = function (index = 0) {\n  return this.els[index]\n}\n\n/**\n * @description returns last element in an array of elements with same selector\n * @returns {HTMLElement} last element in array of elements you want to use\n */\nQuantdom.prototype.lastEl = function () {\n  return this.els[this.els.length - 1]\n}\n\n/**\n * @description returns all matching elements, alias for querySelectorAll\n * @returns {Nodelist} a nodelists\n */\nQuantdom.prototype.els = function () {\n  return this.els\n}\n\n/**\n * @description adds an event on an element(s)\n * @param {string} event type of event to add to element\n * @param {function} listener event listener function to execute on event\n */\nQuantdom.prototype.on = function (event, listener) {\n  return this.each(el => {\n    el.addEventListener(event, listener)\n  })\n}\n\n/**\n * @description removes an event on an element(s)\n * @param {string} event type of event to add to element\n * @param {function} listener event listener function to remove\n */\nQuantdom.prototype.off = function (event, listener) {\n  return this.each(el => {\n    el.removeEventListener(event, listener)\n  })\n}\n\n/**\n * @description Appends an html string to a dom element\n * @param  {string} html html string to append to DOM\n */\nQuantdom.prototype.append = function (html) {\n  return this.each(el => {\n    el.insertAdjacentHTML('beforeend', html)\n  })\n}\n\n/**\n * @description prepends a html string to dom\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.prepend = function (html) {\n  return this.each(el => {\n    el.insertAdjacentHTML('afterbegin', html)\n  })\n}\n\n/**\n * @description inserts a html string to dom right before element\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.before = function (html) {\n  return this.each(el => {\n    el.insertAdjacentHTML('beforebegin', html)\n  })\n}\n\n/**\n * @description inserts a html string to dom right after element\n * @param {string} html string of html to prepend\n */\nQuantdom.prototype.after = function (html) {\n  return this.each(el => {\n    el.insertAdjacentHTML('afterend', html)\n  })\n}\n\n/**\n * @description sets an elements attribute or returns first element attribute value\n * @param {string} attr an attribue\n * @param {any} value a value to set attribute\n * @return {string} value of first occurence of element attribute\n */\nQuantdom.prototype.attr = function (attr, value) {\n  if (value !== undefined) {\n    return this.each(el => {\n      el.setAttribute(attr, value)\n    })\n  }\n  return this.els[0].getAttribute(attr)\n}\n\n/**\n * @description adds display none from css inline styles\n * @param {boolean} [aria] if true sets ara-hidden to true instead of setting inline display style to none\n */\nQuantdom.prototype.hide = function (ariaOnly) {\n  return this.each(el => {\n    if (ariaOnly) {\n      el.setAttribute('aria-hidden', 'true')\n    } else {\n      el.style.display = 'none'\n      el.setAttribute('aria-hidden', 'true')\n    }\n  })\n}\n\n/**\n * @description removes display none from css inline styles\n * @param {boolean} [aria] if true sets ara-hidden to false instead of removing inline display style\n */\nQuantdom.prototype.show = function (ariaOnly) {\n  return this.each(el => {\n    if (ariaOnly) {\n      el.setAttribute('aria-hidden', 'false')\n    } else {\n      el.style.display = ''\n      el.setAttribute('aria-hidden', 'false')\n    }\n  })\n}\n\n/**\n * @description inserts/replaces html or returns html of an element\n * @param {string} [html] html to insert into dom\n * @returns {string} html of first occurence of element\n */\nQuantdom.prototype.html = function (html) {\n  if (html !== undefined) {\n    return this.each(el => {\n      el.innerHTML = html\n    })\n  }\n  return this.els[0].innerHTML\n}\n\n/**\n * @description inserts/replaces text or returns text of an element\n * @param {string} [newValue] text to insert into dom\n * @returns {string} text of first occurence of element\n */\nQuantdom.prototype.text = function (newValue) {\n  if (newValue !== undefined) {\n    return this.each(el => {\n      el.textContent = newValue\n    })\n  }\n  return this.els[0].textContent\n}\n\n/**\n * @description gets a value of first html element or sets a new value of all HTML Elements\n * @param {*} [newValue] a new value to set\n * @returns {*} value of first occurence of element\n */\nQuantdom.prototype.val = function (newValue) {\n  if (newValue === undefined) {\n    return this.els[0].value\n  }\n  return this.each(el => {\n    el.value = newValue\n  })\n}\n\n/**\n * @description adds a class to the selected element(s)\n * @param {string} className\n */\nQuantdom.prototype.addClass = function (className) {\n  return this.each(el => {\n    el.classList.add(className)\n  })\n}\n\n/**\n * @description removes a class from the selected element(s)\n * @param {string} className\n */\nQuantdom.prototype.removeClass = function (className) {\n  return this.each(el => {\n    el.classList.remove(className)\n  })\n}\n\n/**\n * @description toggles a class on selected element(s)\n * @param {string} className\n */\nQuantdom.prototype.toggleClass = function (className) {\n  return this.each(el => {\n    el.classList.toggle(className)\n  })\n}\n\n/**\n * @description sets a style or returnsthe style property value\n * @param {string} prop css property to get or set\n * @param {*} [value] value to set styles\n * @returns computed style of element\n */\nQuantdom.prototype.css = function (prop, value) {\n  if (prop && value) {\n    return this.each(el => {\n      el.style[prop] = value\n    })\n  }\n  return getComputedStyle(this.els[0])[prop]\n}\n\n/**\n * Document Ready\n * @description wrapper to run code that needs to wait for DOM to be fully loaded\n * @param {callback} cb - a callback to run once the DOM is ready\n */\nexport function docReady(cb) {\n  if (\n    document.readyState === 'complete' ||\n    document.readyState === 'interactive'\n  ) {\n    setTimeout(cb, 1) // call on next available tick\n  } else {\n    document.addEventListener('DOMContentLoaded', cb)\n  }\n}\n\n/**\n * @description initializes Quantdom class in order to use it methods\n * @param {String | HTMLElement} selector an DOM element to manipulate\n * @returns {Quantdom}\n */\n\nexport default function (selector) {\n  return new Quantdom(selector)\n}\n"],"names":["Quantdom","constructor","selector","this","els","document","querySelectorAll","NodeList","prototype","isPrototypeOf","docReady","cb","readyState","setTimeout","addEventListener","index","each","handler","forEach","parent","parentNode","find","findEl","querySelector","findEls","el","lastEl","length","on","event","listener","off","removeEventListener","append","html","insertAdjacentHTML","prepend","before","after","attr","value","undefined","setAttribute","getAttribute","hide","ariaOnly","style","display","show","innerHTML","text","newValue","textContent","val","addClass","className","classList","add","removeClass","remove","toggleClass","toggle","css","prop","getComputedStyle"],"mappings":"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"}